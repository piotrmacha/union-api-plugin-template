if(NOT UnionAPI_FOUND)
    include(FetchContent)

    if(${UNION_API_FETCH_TYPE} STREQUAL "SOURCE")
        FetchContent_Declare(UnionAPI GIT_REPOSITORY ${UNION_API_URL} GIT_TAG ${UNION_API_COMMIT_REF})
        FetchContent_MakeAvailable(UnionAPI)
        FetchContent_GetProperties(UnionAPI SOURCE_DIR UnionAPI_SOURCES)
        set(UnionAPI_INCLUDE ${UnionAPI_SOURCES}/union-api/union-api)
        set(UnionAPI_LIB_SHARED UnionAPI)
        set(UnionAPI_LIB_STATIC UnionAPIStatic)
        set(GothicAPI_INCLUDE ${UnionAPI_SOURCES}/gothic-api)
        set(GothicAPI_LIB GothicAPI)

    elseif(${UNION_API_FETCH_TYPE} STREQUAL "BINARY")
        set(URL ${UNION_API_URL})
        string(REPLACE "{version}" ${UNION_API_VERSION} URL ${URL})
        string(REPLACE "{package}" ${UNION_API_PACKAGE} URL ${URL})
        FetchContent_Declare(UnionAPI URL ${URL} SOURCE_DIR ${CMAKE_BINARY_DIR}/union-api)
        FetchContent_MakeAvailable(UnionAPI)
        set(UnionAPI_INCLUDE ${CMAKE_BINARY_DIR}/union-api/include)
        set(UnionAPI_DIR ${CMAKE_BINARY_DIR}/union-api/lib/cmake/UnionAPI)
        set(UnionAPI_LIB_SHARED UnionAPI::UnionAPI)
        set(UnionAPI_LIB_STATIC UnionAPI::UnionAPIStatic)
        set(GothicAPI_INCLUDE ${UnionAPI_INCLUDE})
        set(GothicAPI_LIB UnionAPI::GothicAPI)

    else()
        message(FATAL_ERROR "Invalid UNION_API_FETCH_TYPE value (${UNION_FETCH_API_VALUE}). Use either SOURCE or BINARY")
    endif()
endif()